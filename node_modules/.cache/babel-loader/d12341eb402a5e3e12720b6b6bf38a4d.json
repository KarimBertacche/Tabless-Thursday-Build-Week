{"ast":null,"code":"import axios from 'axios';\nimport { axiosWithAuth } from '../../axiosAuth';\nexport const LOGIN_START = 'LOGIN_START';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGIN_END = 'LOGIN_END';\nexport const FETCH_START = 'FETCH_START';\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\nexport const FETCH_FAILURE = 'FETCH_FAILURE';\nexport const FETCH_END = 'FETCH_END';\nexport const LOGOUT_USER = 'LOGOUT_USER';\nexport function fetchData() {}\nconst loginAPI = \"https://tabless-thursday-backend.herokuapp.com/api/login\";\nexport const login = ({\n  username,\n  password,\n  email\n}) => dispatch => {\n  const credentials = {\n    username,\n    password,\n    email\n  }; // dispatch({ type: LOGIN_START });\n\n  return axios.post(loginAPI, credentials).then(response => {\n    localStorage.setItem('token', response.data.token);\n    localStorage.setItem('userID', response.data.user.id);\n    localStorage.setItem('userLogged', true);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: response.data.user\n    });\n  }).catch(error => {\n    debugger;\n  }).finally(() => {// dispatch({ type: LOGIN_END });\n  });\n};\nexport const logOutUser = () => dispatch => {\n  dispatch({\n    type: LOGOUT_USER\n  });\n};\nconst registerAPI = \"https://tabless-thursday-backend.herokuapp.com/api/register/\";\nexport const registerUser = ({\n  username,\n  password,\n  email\n}) => dispatch => {\n  const credentials = {\n    username,\n    password,\n    email\n  };\n  axios.post(registerAPI, credentials);\n};\nexport const getUserTabs = () => dispatch => {\n  let id = localStorage.getItem('userID');\n  axiosWithAuth().get(\"https://tabless-thursday-backend.herokuapp.com/api/users/\".concat(id)).then(response => {\n    dispatch({\n      type: FETCH_SUCCESS,\n      payload: response.data.tabs\n    });\n  }).catch(error => {\n    debugger;\n  });\n};","map":{"version":3,"sources":["/Users/klaptop/Desktop/tabless-thursday/src/store/actions/actions.js"],"names":["axios","axiosWithAuth","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","LOGIN_END","FETCH_START","FETCH_SUCCESS","FETCH_FAILURE","FETCH_END","LOGOUT_USER","fetchData","loginAPI","login","username","password","email","dispatch","credentials","post","then","response","localStorage","setItem","data","token","user","id","type","payload","catch","error","finally","logOutUser","registerAPI","registerUser","getUserTabs","getItem","get","tabs"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,SAAS,GAAG,WAAlB;AAEP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,SAAS,GAAG,WAAlB;AAEP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAGP,OAAO,SAASC,SAAT,GAAqB,CAE3B;AAED,MAAMC,QAAQ,GAAG,0DAAjB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,QAAZ;AAAsBC,EAAAA;AAAtB,CAAD,KAAmCC,QAAQ,IAAI;AAChE,QAAMC,WAAW,GAAG;AAAEJ,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,GAApB,CADgE,CAGhE;;AAEA,SAAOhB,KAAK,CACCmB,IADN,CACWP,QADX,EACqBM,WADrB,EAEME,IAFN,CAEWC,QAAQ,IAAI;AACdC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,QAAQ,CAACG,IAAT,CAAcC,KAA5C;AACAH,IAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BF,QAAQ,CAACG,IAAT,CAAcE,IAAd,CAAmBC,EAAlD;AACAL,IAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmC,IAAnC;AACAN,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAEzB,aAAR;AAAuB0B,MAAAA,OAAO,EAAER,QAAQ,CAACG,IAAT,CAAcE;AAA9C,KAAD,CAAR;AACH,GAPN,EAQMI,KARN,CAQYC,KAAK,IAAI;AACZ;AACH,GAVN,EAWMC,OAXN,CAWc,MAAM,CACX;AACH,GAbN,CAAP;AAcH,CAnBM;AAqBP,OAAO,MAAMC,UAAU,GAAG,MAAMhB,QAAQ,IAAI;AACxCA,EAAAA,QAAQ,CAAC;AAAEW,IAAAA,IAAI,EAAElB;AAAR,GAAD,CAAR;AACH,CAFM;AAIP,MAAMwB,WAAW,GAAG,8DAApB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAErB,EAAAA,QAAF;AAAYC,EAAAA,QAAZ;AAAsBC,EAAAA;AAAtB,CAAD,KAAmCC,QAAQ,IAAI;AACvE,QAAMC,WAAW,GAAG;AAAEJ,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,GAApB;AAEAhB,EAAAA,KAAK,CACAmB,IADL,CACUe,WADV,EACuBhB,WADvB;AAEH,CALM;AAOP,OAAO,MAAMkB,WAAW,GAAG,MAAMnB,QAAQ,IAAI;AACzC,MAAIU,EAAE,GAAGL,YAAY,CAACe,OAAb,CAAqB,QAArB,CAAT;AAEApC,EAAAA,aAAa,GACRqC,GADL,oEACqEX,EADrE,GAEKP,IAFL,CAEUC,QAAQ,IAAI;AACdJ,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAErB,aAAR;AAAuBsB,MAAAA,OAAO,EAAER,QAAQ,CAACG,IAAT,CAAce;AAA9C,KAAD,CAAR;AACH,GAJL,EAKKT,KALL,CAKWC,KAAK,IAAI;AACZ;AACH,GAPL;AAQH,CAXM","sourcesContent":["import axios from 'axios';\nimport { axiosWithAuth } from '../../axiosAuth';\n\nexport const LOGIN_START = 'LOGIN_START';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGIN_END = 'LOGIN_END';\n\nexport const FETCH_START = 'FETCH_START';\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\nexport const FETCH_FAILURE = 'FETCH_FAILURE';\nexport const FETCH_END = 'FETCH_END';\n\nexport const LOGOUT_USER = 'LOGOUT_USER';\n\n\nexport function fetchData() {\n\n}\n\nconst loginAPI = \"https://tabless-thursday-backend.herokuapp.com/api/login\";\n\nexport const login = ({ username, password, email }) => dispatch => {\n    const credentials = { username, password, email };\n\n    // dispatch({ type: LOGIN_START });\n\n    return axios\n                .post(loginAPI, credentials)\n                .then(response => {\n                    localStorage.setItem('token', response.data.token);\n                    localStorage.setItem('userID', response.data.user.id);\n                    localStorage.setItem('userLogged', true);\n                    dispatch({ type: LOGIN_SUCCESS, payload: response.data.user })\n                })\n                .catch(error => {\n                    debugger\n                })\n                .finally(() => {\n                    // dispatch({ type: LOGIN_END });\n                })\n}\n\nexport const logOutUser = () => dispatch => {\n    dispatch({ type: LOGOUT_USER });\n}\n\nconst registerAPI = \"https://tabless-thursday-backend.herokuapp.com/api/register/\";\n\nexport const registerUser = ({ username, password, email }) => dispatch => {\n    const credentials = { username, password, email };\n    \n    axios\n        .post(registerAPI, credentials)\n}\n\nexport const getUserTabs = () => dispatch => {\n    let id = localStorage.getItem('userID');\n\n    axiosWithAuth()\n        .get(`https://tabless-thursday-backend.herokuapp.com/api/users/${id}`)\n        .then(response => {\n            dispatch({ type: FETCH_SUCCESS, payload: response.data.tabs })\n        })\n        .catch(error => {\n            debugger\n        });\n}\n\n"]},"metadata":{},"sourceType":"module"}